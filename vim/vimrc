" Initialization {{{
set nocompatible                  " Must come first because it changes other options.
let mapleader = ","
silent! call pathogen#runtime_append_all_bundles() " Load pathogen

runtime! plugin/sensible.vim " Load sensible before vimrc
" }}}

" General options  {{{

set showmode                      " Display the mode you're in.

set hidden                        " Handle multiple buffers better.

set wildmode=longest:full         " Complete files like a shell.
set wildmenu

set ignorecase                    " Case-insensitive searching.
set smartcase                     " But case-sensitive if expression contains a capital letter.

set hlsearch                      " Highlight matches.

set wrap                          " Turn on line wrapping.
set scrolloff=3                   " Show 3 lines of context around the cursor.

set title                         " Set the terminal's title

set visualbell                    " No beeping.

set tabstop=2                     " Global tab width.
set shiftwidth=2                  " And again, related.
set expandtab                     " Use spaces instead of tabs

set exrc                          " enable per-directory .vimrc files
set secure                        " disable unsafe commands in local .vimrc files

set history=1000                  " Command line history

set updatetime=2000                " Time after stop typing before triggering events  

set mouse=a                       " Allow mouse interaction in terminal 

set ttymouse=xterm2               " Reporting the mouse position while the mouse is dragged.

"Autosave/Read
autocmd BufLeave,FocusLost * silent! wall
autocmd FocusGained,BufEnter * :silent! !
set autowrite
set autoread

"Directories for swap,undo and backup
set directory=$HOME/.local/share/vim/swap
set backupdir=$HOME/.local/share/vim/backup
set undodir=$HOME/.local/share/vim/undo
set undofile

" Allow per tab working dirs 
"Ex :let t:wd = "some/directory" 
autocmd TabEnter * if exists("t:wd") | exe "cd" t:wd | endif 


" General options }}}

" Colors {{{

if !has('gui_running')
    "Use light background
    set background=dark
    " More colors in terminal 
    set t_Co=256
endif

" Folds
highlight Folded ctermfg=230 ctermbg=241

" Diff colours
highlight DiffText ctermbg=LightBlue
highlight DiffAdd ctermbg=LightBlue
highlight DiffChange ctermbg=LightCyan
highlight DiffDelete ctermfg=Blue ctermbg=LightCyan

" Search highlight
highlight Search ctermfg=White

" }}}

" Plugin settings and configuration  {{{

"Easymotion 
"No background shading
let g:EasyMotion_do_shade = 0

let NERDTreeChDirMode=2
let NERDTreeIgnore = ['^target$','\.iml$']
let NERDTreeMouseMode=3

let g:CommandTMaxHeight=15
let g:CommandTMinHeight=15
let g:CommandTHighlightColor='StatusLine'

" Clear input 
let g:CommandTClearMap="<C-w>"

"Snipmates support functions
source $HOME/.vim/snippets/support_functions.vim

"Syntastic
let g:syntastic_mode_map = { 'mode': 'active', 'active_filetypes': ['ruby','elixir'],'passive_filetypes': ['java','xml'] }
let g:syntastic_enable_elixir_checker = 1
let g:syntastic_elixir_checkers = ['elixir']
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

"Rubytest
map <LocalLeader>t <Plug>RubyTestRun     " change from <Leader>t to <Leader>\
map <LocalLeader>T <Plug>RubyFileRun     " change from <Leader>T to <Leader>]
map <LocalLeader>l <Plug>RubyTestRunLast " change from <Leader>l to <Leader>/


" Powerline
set rtp+=$HOME/dotfiles/powerline/powerline/powerline/bindings/vim
python from powerline.vim import setup as powerline_setup
python powerline_setup()
python del powerline_setup

" Eclim
" Disable eclim, enable by unlet:g:EclimDisable in project .vimrc 
let g:EclimDisabled=1

" Gitgutter
nmap ]h <Plug>GitGutterNextHunk
nmap [h <Plug>GitGutterPrevHunk
highlight clear SignColumn


"}}}

" File settings{{{
augroup file
  autocmd!
  autocmd BufRead,BufNewFile,BufEnter jboss-esb.xml setlocal filetype=jboss-esb syntax=xml foldmethod=syntax foldlevel=99
  autocmd BufRead,BufNewFile,BufEnter *.wsdl setlocal syntax=xml foldmethod=syntax foldlevel=99
  " Remove : from keyword list
  autocmd BufRead,BufNewFile,BufEnter *.xml setlocal iskeyword-=58
  autocmd BufRead,BufNewFile,BufEnter *.xslt  setlocal iskeyword-=58
  autocmd BufRead,BufNewFile,BufEnter *.xsd setlocal iskeyword-=58
  "Auto source vimrc files
  autocmd bufwritepost .vimrc,vimrc source $MYVIMRC
  autocmd bufwritepost .gvimrc,gvimrc source $MYGVIMRC

  " Set cursor position unless it's invalid or in an event handler
  autocmd BufReadPost *
      \ if line("'\"") > 0 && line("'\"") <= line("$") |
      \   exe "normal g`\"" |
      \ endif

augroup END

"}}}

" Folding {{{
set foldtext=CustomFoldText() 
let g:xml_syntax_folding=1

augroup folding
    autocmd!
    autocmd FileType xml  setlocal foldmethod=syntax foldlevel=6
    autocmd FileType java setlocal foldmethod=syntax foldlevel=6
    autocmd FileType ruby setlocal foldmethod=syntax foldlevel=6
    autocmd FileType xsd  setlocal foldmethod=syntax foldlevel=6
    autocmd FileType xslt setlocal foldmethod=syntax foldlevel=6
    autocmd FileType xsl  setlocal foldmethod=syntax foldlevel=6
    autocmd FileType vim  setlocal foldmethod=marker foldlevel=3
augroup END

" Folding }}}

" Spelling {{{
highlight clear SpellBad
highlight clear SpellCap 
highlight clear SpellRare
highlight clear SpellLocal
highlight SpellBad cterm=underline
highlight SpellCap cterm=underline
highlight SpellRare cterm=underline
highlight SpellLocal cterm=underline

augroup spelling
    autocmd!
    autocmd FileType elixir setlocal spell spelllang=elixir
augroup END

" Spelling }}}


" Mappings {{{
"Window
noremap <C-w>" :belowright new<cr>
noremap <C-w><bar> :belowright vnew<cr>
noremap <C-w><backspace> :close<cr>
noremap <C-w><enter> :tabnew<cr>

"Vimrc stuff
nnoremap <leader>ve :tabedit ~/dotfiles/vim/vimrc<cr>
nnoremap <leader>vs :source $MYVIMRC<cr>

"Undo tree plugin
nnoremap <F5> :GundoToggle<CR>

"NerdTree plugin
nnoremap <F3> :NERDTreeToggle<CR>
nnoremap <F4> :NERDTreeFind<CR>

"TagList
noremap <F6> :TlistToggle<CR>
let Tlist_Display_Tag_Scope = 0
let Tlist_File_Fold_Auto_Close = 1
let Tlist_Use_SingleClick = 1

"Command-t
"Find file
nnoremap <silent> <Leader>ff :CommandT .<CR>
"Find buffer
nnoremap <silent> <Leader>fb :CommandTBuffer<CR>
"Find tag
nnoremap <silent> <Leader>ft :CommandTTag<CR>
"Find jump
nnoremap <silent> <Leader>fj :CommandTJump<CR>
"Clear find
nnoremap <silent> <Leader>fc :CommandTFlush<CR>

" Search for the current selection (redux)
xnoremap * :<C-u>call <SID>VSetSearch()<CR>/<C-R>=@/<CR><CR>
xnoremap # :<C-u>call <SID>VSetSearch()<CR>?<C-R>=@/<CR><CR>

" Git grep with visual indicator
noremap <leader>g :let @/ = expand("<cword>") \| :execute 'Ggrep ' .expand("<cword>")<CR>/<C-R>=@/<CR><CR>
xnoremap <leader>g :<C-u>call <SID>VisualGitGrep()<CR>/<C-R>=@/<CR><CR>
noremap <c-g> :let @/ = expand("<cword>") \| :execute 'Ggrep ' .expand("<cword>")<CR>/<C-R>=@/<CR><CR>
xnoremap <c-g> :<C-u>call <SID>VisualGitGrep()<CR>/<C-R>=@/<CR><CR>

"Eclim
nnoremap <Leader>jt :JUnit<CR> 
nnoremap <Leader>jb :ProjectBuild<CR> 
nnoremap <Leader>pb :ProjectBuild<CR> 
nnoremap <Leader>jc :JavaCorrect<CR> 
nnoremap <Leader>ji :JavaImport<CR> 
nnoremap <Leader>jr :ProjectRefresh<CR> 
nnoremap <Leader>pr :ProjectRefresh<CR> 
nnoremap <C-j> :JavaSearchContext<CR>

"Expand active files directory
cnoremap <expr> %% getcmdtype() == ':' ? expand('%:h').'/' : '%%'

"Toggle background using same keyboard mapping style as unimpaired plugin
nnoremap cob :call ToggleBackground()<cr>

"Snippets
nnoremap <Leader>sr :call ReloadAllSnippets()<cr>

"Search and Replace Word under cursor
nnoremap <leader>r ebviw"vy:%s/\<<C-R>v\>//gc<left><left><left>

"Indent Document
nnoremap <leader>id mvggVG='v

"Use dot command line wise in visual mode
xnoremap . :norm.<CR> to vimrc

augroup mappings
autocmd!
"Canonicalize xml element. Change </test> into <test></test>
autocmd Filetype xml,xstl,xsd nmap <leader>xc 0f/x\e

autocmd Filetype jboss-esb noremap <silent> <buffer> <C-j> :call eclim#java#search#FindClassDeclaration()<cr>
autocmd Filetype ruby noremap <leader>t :!ruby %<cr>
augroup END

"Syntastic
nnoremap <leader>s :SyntasticCheck<CR>

" Next/previous tab
nnoremap ]w :tabnext<CR>
nnoremap [w :tabprevious<CR>

" Focus on current fold, close the rest
nnoremap <leader>z zMzvzz

" Show highlight  
map <F9> :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '>trans<' . synIDattr(synID(line("."),col("."),0),"name") . "> lo<"  . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>

" Mappings }}}

" Commands {{{
"Xmllint
command! Xmllint  :%!xmllint --format --recover -
" }}}

" Functions {{{

"Change xml namespace prefix function {{{
function! XmlChangeNamespacePrefix(from,to)
  if a:from == "" 
    let from_separator = ""
  else
    let from_separator = ":"
  endif

  if a:to == "" 
    let to_separator = ""
  else
    let to_separator = ":"
  endif

  if a:from == ""
    execute '%s/\v\<(\w+)>' . a:from . from_separator .'/<' . a:to . to_separator .'\1/ge'
    execute '%s/\v\<\/(\w+)>' . a:from . from_separator .'/<\/' . a:to . to_separator .'\1/ge'
    execute '%s/xmlns=/xmlns' . to_separator . a:to . '=/ge'
    execute '%s/type="' . a:from . from_separator . '/type="' . a:to . to_separator . '/ge'
    execute '%s/ref="' . a:from . from_separator . '/ref="' . a:to . to_separator . '/ge'
    execute '%s/base="' . a:from . from_separator . '/base="' . a:to . to_separator . '/ge'
  else
    execute '%s/\v\<(\?)@!' . a:from . from_separator .'/<' . a:to . to_separator .'/ge'
    execute '%s/<\/' . a:from . from_separator .'/<\/' . a:to . to_separator . '/ge'
    execute '%s/xmlns' . from_separator . a:from . '=/xmlns' . to_separator . a:to . '=/ge'
    execute '%s/type="' . a:from . from_separator . '/type="' . a:to . to_separator . '/ge'
    execute '%s/ref="' . a:from . from_separator . '/ref="' . a:to . to_separator . '/ge'
    execute '%s/base="' . a:from . from_separator . '/base="' . a:to . to_separator . '/ge'
  endif
endfunction
" }}}

"Toggle background {{{
function! ToggleBackground()
  if &background == "dark"
    set background=light
  else 
    set background=dark
  endif
endfunction
" }}}

" Search visual selection {{{
function! s:VSetSearch()
  let temp = @s
  norm! gv"sy
  let @/ = '\V' . substitute(escape(@s, '/\'), '\n', '\\n', 'g')
  let @s = temp
endfunction
" }}}

" CustomFoldText {{{
function! CustomFoldText()
  "get first non-blank line
  let fs = v:foldstart
  while getline(fs) =~ '^\s*$' | let fs = nextnonblank(fs + 1)
  endwhile
  if fs > v:foldend
    let line = getline(v:foldstart)
  else
    let line = substitute(getline(fs), '\t', repeat(' ', &tabstop), 'g')
  endif

  let w = winwidth(0) - &foldcolumn - (&number ? 8 : 0)
  let foldSize = 1 + v:foldend - v:foldstart
  let foldSizeStr = " " . foldSize . " lines "
  let foldLevelStr = repeat("+--", v:foldlevel)
  let lineCount = line("$")
  let foldPercentage = printf("[%.1f", (foldSize*1.0)/lineCount*100) . "%] "
  let expansionString = repeat(".", w - strwidth(foldSizeStr.line.foldLevelStr.foldPercentage))
  return line . expansionString . foldSizeStr . foldPercentage . foldLevelStr
endf
" }}}

" Git grep visual selection {{{
function! s:VisualGitGrep()
  let temp = @s
  norm! gv"sy
  execute 'Ggrep "' . substitute(substitute(escape(@s,'"'),"'","\'","g"),'\n','\\n','g') . '"'
  let @/ = '\V' . substitute(escape(@s, '/\'), '\n', '\\n', 'g')
  let @s = temp
endfunction
" }}}


" Set working dir for tab {{{
function! SetTabDir()
  let t:wd = getcwd()
endfunction
command! SetTabDir :call SetTabDir()
" }}}

"}}}

