" Initialization {{{
set nocompatible                  " Must come first because it changes other options.

silent! call pathogen#runtime_append_all_bundles() " Load pathogen

runtime! plugin/sensible.vim " Load sensible before vimrc
" }}}

" General options  {{{

set showmode                      " Display the mode you're in.

set hidden                        " Handle multiple buffers better.

set wildmode=list:longest         " Complete files like a shell.

set ignorecase                    " Case-insensitive searching.
set smartcase                     " But case-sensitive if expression contains a capital letter.

set number                        " Show line numbers.

set hlsearch                      " Highlight matches.

set wrap                          " Turn on line wrapping.
set scrolloff=3                   " Show 3 lines of context around the cursor.

set title                         " Set the terminal's title

set visualbell                    " No beeping.

set tabstop=2                    " Global tab width.
set shiftwidth=2                 " And again, related.
set expandtab                    " Use spaces instead of tabs

set exrc            " enable per-directory .vimrc files
set secure          " disable unsafe commands in local .vimrc files

" Useful status information at bottom of screen
set statusline=[%n]\ %<%.99f\ %h%w%m%r%y\ %{fugitive#statusline()}%{exists('*CapsLockStatusline')?CapsLockStatusline():''}%=%-16(\ %l,%c-%v\ %)%P

"Autosave/Read
autocmd BufLeave,FocusLost * silent! wall
set autowrite
set autoread

" General options }}}

" Plugin settings and configuration  {{{
let NERDTreeChDirMode=2
let NERDTreeIgnore = ['^target$','\.iml$']

"TextMate fuzzy finder
let g:fuzzy_ignore = "*/target/*;target/*;target;*.iml"

"Ctrl-p
" set wildignore+=*/tmp/*,*/target/*,*.so,*.swp,*.iml,  "

"Snipmates support functions
source $HOME/.vim/snippets/support_functions.vim

"}}}

" Folding {{{
let g:xml_syntax_folding=1

augroup folding
    autocmd!
    autocmd FileType xml  setlocal foldmethod=syntax foldlevel=2
    autocmd FileType java setlocal foldmethod=syntax foldlevel=1
    autocmd FileType ruby setlocal foldmethod=syntax foldlevel=1
    autocmd FileType xsd  setlocal foldmethod=syntax foldlevel=2
    autocmd FileType vim  setlocal foldmethod=marker
augroup END

" Folding }}}

" Mappings {{{
"Mappings for vimrc stuff
nnoremap <leader>ve :tabedit ~/dotfiles/vim/vimrc<cr>
nnoremap <leader>vs :source $MYVIMRC<cr>

"Remapping the esc key
inoremap jj <esc>
cnoremap jj <c-c>

"Undo tree plugin
nnoremap <F5> :GundoToggle<CR>

"NerdTree plugin
nnoremap <F3> :NERDTreeToggle<CR>

"FuzzyFinderTextMate
noremap <Leader>t :FuzzyFinderTextMate<Enter>
noremap <leader>r :FuzzyFinderTextMateRefreshFiles<CR>

" Search for the current selection (redux)
xnoremap * :<C-u>call <SID>VSetSearch()<CR>/<C-R>=@/<CR><CR>
xnoremap # :<C-u>call <SID>VSetSearch()<CR>?<C-R>=@/<CR><CR>

"Eclim
nnoremap <Leader>jt :JUnit<CR> 
nnoremap <Leader>jb :ProjectBuild<CR> 
nnoremap <Leader>jc :JavaCorrect<CR> 

"Expand active files directory
cnoremap <expr> %% getcmdtype() == ':' ? expand('%:h').'/' : '%%'

"Ctrlp
noremap <leader>p :CtrlPCurWD<CR>

"Toggle background using same keyboard mapping style as unimpaired plugin
nnoremap cob :call ToggleBackground()<cr>

augroup mappings
autocmd!
"Canonicalize xml element. Change </test> into <test></test>
autocmd Filetype xml,xstl,xsd nmap <leader>xc 0f/x<leader>e
augroup END

" Mappings }}}

" Commands {{{
"Xmllint
command! Xmllint  :%!xmllint --format --recover -
" }}}

" Functions {{{

"Change xml namespace prefix function {{{
function! XmlChangeNamespacePrefix(from,to)
  if a:from == "" 
    let from_separator = ""
  else
    let from_separator = ":"
  endif

  if a:to == "" 
    let to_separator = ""
  else
    let to_separator = ":"
  endif

  if a:from == ""
    execute '%s/\v\<(\w+)>' . a:from . from_separator .'/<' . a:to . to_separator .'\1/ge'
    execute '%s/\v\<\/(\w+)>' . a:from . from_separator .'/<\/' . a:to . to_separator .'\1/ge'
    execute '%s/xmlns=/xmlns' . to_separator . a:to . '=/ge'
  else
    execute '%s/\v\<(\?)@!' . a:from . from_separator .'/<' . a:to . to_separator .'/ge'
    execute '%s/<\/' . a:from . from_separator .'/<\/' . a:to . to_separator . '/ge'
    execute '%s/xmlns' . from_separator . a:from . '/xmlns' . to_separator . a:to . '/ge'
  endif
endfunction
" }}}

"Toggle background {{{
function! ToggleBackground()
  if &background == "dark"
    set background=light
  else 
    set background=dark
  endif
endfunction
" }}}

" Search visual selection {{{
function! s:VSetSearch()
  let temp = @s
  norm! gv"sy
  let @/ = '\V' . substitute(escape(@s, '/\'), '\n', '\\n', 'g')
  let @s = temp
endfunction
" }}}

"}}}

