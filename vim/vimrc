set nocompatible                  " Must come first because it changes other options.

silent! call pathogen#runtime_append_all_bundles() " Load pathogen

runtime! plugin/sensible.vim " Load sensible before vimrc


set showmode                      " Display the mode you're in.

set hidden                        " Handle multiple buffers better.

set wildmode=list:longest         " Complete files like a shell.

set ignorecase                    " Case-insensitive searching.
set smartcase                     " But case-sensitive if expression contains a capital letter.

set number                        " Show line numbers.

set hlsearch                      " Highlight matches.

set wrap                          " Turn on line wrapping.
set scrolloff=3                   " Show 3 lines of context around the cursor.

set title                         " Set the terminal's title

set visualbell                    " No beeping.

set tabstop=2                    " Global tab width.
set shiftwidth=2                 " And again, related.
set expandtab                    " Use spaces instead of tabs

" Useful status information at bottom of screen
set statusline=[%n]\ %<%.99f\ %h%w%m%r%y\ %{fugitive#statusline()}%{exists('*CapsLockStatusline')?CapsLockStatusline():''}%=%-16(\ %l,%c-%v\ %)%P

set exrc            " enable per-directory .vimrc files
set secure          " disable unsafe commands in local .vimrc files

" Automatic fold settings for specific files.
let g:xml_syntax_folding=1
autocmd FileType xml setlocal foldmethod=syntax foldlevel=1
autocmd FileType java setlocal foldmethod=syntax foldlevel=1
autocmd FileType ruby setlocal foldmethod=syntax foldlevel=1
autocmd FileType xsd setlocal foldmethod=syntax foldlevel=2

" autocmd FileType css  setlocal foldmethod=indent shiftwidth=2 tabstop=2

" For the MakeGreen plugin and Ruby RSpec. Uncomment to use.
"autocmd BufNewFile,BufRead *_spec.rb compiler rspec

"clear the search highlighting by pressing the Return key or ctrl-l
"nnoremap <CR> :noh<CR><CR>

"Undo tree plugin
nnoremap <F5> :GundoToggle<CR>

"NerdTree plugin
nnoremap <F3> :NERDTreeToggle<CR>
let NERDTreeChDirMode=2
let NERDTreeIgnore = ['^target$','\.iml$']

"Remapping the esc key
inoremap jj <esc>
cnoremap jj <c-c>

"FuzzyFinderTextMate
"let g:fuf_file_exclude = '\v\~$|\.o$|\.exe$|\.bak$|\.swp|\.class$|^target$'
noremap <Leader>t :FuzzyFinderTextMate<Enter>
noremap <leader>r :FuzzyFinderTextMateRefreshFiles<CR>
let g:fuzzy_ignore = "*/target/*;target/*;target;*.iml"

"Xmllint
au FileType xml setlocal equalprg=xmllint\ --format\ --recover\ -\ 2>/dev/null
command! Xmllint  :%!xmllint --format --recover -

"Autosave/Read
autocmd BufLeave,FocusLost * silent! wall
set autowrite
set autoread

" Search for the current selection (redux)
xnoremap * :<C-u>call <SID>VSetSearch()<CR>/<C-R>=@/<CR><CR>
xnoremap # :<C-u>call <SID>VSetSearch()<CR>?<C-R>=@/<CR><CR>
function! s:VSetSearch()
  let temp = @s
  norm! gv"sy
  let @/ = '\V' . substitute(escape(@s, '/\'), '\n', '\\n', 'g')
  let @s = temp
endfunction

"Snippets support functions
so $HOME/.vim/snippets/support_functions.vim

"Eclim
nnoremap <Leader>j :JUnit<CR> 
nnoremap <Leader>b :ProjectBuild<CR> 
nnoremap <Leader>c :JavaCorrect<CR> 

"Expand active files directory
cnoremap <expr> %% getcmdtype() == ':' ? expand('%:h').'/' : '%%'

noremap <leader>p :CtrlPCurWD<CR>

"Toggle background using same keyboard mapping style as unimpaired plugin
nnoremap cob :call ToggleBackground()<cr>

function! ToggleBackground()
  if &background == "dark"
    set background=light
  else 
    set background=dark
  endif
endfunction

"Change xml namespace prefix function
function! XmlChangeNamespacePrefix(from,to)
  if a:from == "" 
    let from_separator = ""
  else
    let from_separator = ":"
  endif

  if a:to == "" 
    let to_separator = ""
  else
    let to_separator = ":"
  endif

  if a:from == ""
    exe '%s/\v\<(\w+)>' . a:from . from_separator .'/<' . a:to . to_separator .'\1/ge'
    exe '%s/\v\<\/(\w+)>' . a:from . from_separator .'/<\/' . a:to . to_separator .'\1/ge'
    exe '%s/xmlns=/xmlns' . to_separator . a:to . '=/ge'
  else
    exe '%s/\v\<(\?)@!' . a:from . from_separator .'/<' . a:to . to_separator .'/ge'
    exe '%s/<\/' . a:from . from_separator .'/<\/' . a:to . to_separator . '/ge'
    exe '%s/xmlns' . from_separator . a:from . '/xmlns' . to_separator . a:to . '/ge'
  endif
endfunction

